package messages

import (
	"fmt"
	"log"
	"os"

	"github.com/Resolution-hash/shop_bot/config"
	"github.com/Resolution-hash/shop_bot/internal/sessions"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"github.com/gookit/color"
)

func SendMessage(bot *tgbotapi.BotAPI, userID int, text string, keyboard interface{}) int {
	msg := tgbotapi.NewMessage(int64(userID), text)
	if keyboard != nil {
		switch k := keyboard.(type) {
		case tgbotapi.InlineKeyboardMarkup:
			msg.ReplyMarkup = k
		case tgbotapi.ReplyKeyboardMarkup:
			msg.ReplyMarkup = k
		}
	}
	msg.ParseMode = "HTML"
	sentMsg, err := bot.Send(msg)
	if err != nil {
		color.Redln("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %s\n", err)
		return 0
	}

	return sentMsg.MessageID
}

func SendReplyKeyboard(bot *tgbotapi.BotAPI, userID int, text string, keyboard tgbotapi.ReplyKeyboardMarkup) int {
	msg := tgbotapi.NewMessage(int64(userID), text)
	msg.ReplyMarkup = keyboard
	sentMsg, err := bot.Send(msg)
	if err != nil {
		color.Redln("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %s", err)
		return 0
	}
	color.Greenln("Keyboard is fetched")
	return sentMsg.MessageID
}

func EditMessage(bot *tgbotapi.BotAPI, userID int, messageID int, text string) int {
	msg := tgbotapi.NewEditMessageText(int64(userID), messageID, "–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç")
	sentMsg, err := bot.Send(msg)
	if err != nil {
		color.Redln("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %s\n", err)
		return 0
	}
	color.Greenln("Keyboard is fetched")
	return sentMsg.MessageID
}

func SendMessageWithPhoto(bot *tgbotapi.BotAPI, userID int, text string, keyboard interface{}, imageName string) int {
	cfg, err := config.LoadConfig()
	if err != nil {
		log.Fatal(err)
	}
	path := cfg.ImagesUrl + "\\" + imageName + ".jpg"
	color.Redln(path)

	file, err := os.Open(path)
	if err != nil {
		fmt.Println("Error to upload file")
	}
	defer file.Close()

	msg := tgbotapi.NewPhotoUpload(int64(userID), file.Name())
	msg.File = tgbotapi.FileReader{
		Name:   file.Name(),
		Reader: file,
		Size:   -1,
	}
	msg.Caption = text

	if keyboard != nil {
		switch k := keyboard.(type) {
		case tgbotapi.InlineKeyboardMarkup:
			msg.ReplyMarkup = k
		case tgbotapi.ReplyKeyboardMarkup:
			msg.ReplyMarkup = k
		}
	}
	sentMsg, err := bot.Send(msg)
	if err != nil {
		color.Redln("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
		return 0
	}
	return sentMsg.MessageID
}

func DeleteMessage(bot *tgbotapi.BotAPI, messageID int, userID int) {
	deleteConfig := tgbotapi.NewDeleteMessage(int64(userID), messageID)
	if _, err := bot.Send(deleteConfig); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %s\n", err)
	}
}

func GetReplyKeyboard() tgbotapi.ReplyKeyboardMarkup {
	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–ú–∞–≥–∞–∑–∏–Ω"),
			tgbotapi.NewKeyboardButton("–ö–æ—Ä–∑–∏–Ω–∞"),
		),
	)
	return keyboard
}

func GetKeyboard(value string, back interface{}) tgbotapi.InlineKeyboardMarkup {
	switch value {
	// case "start":
	// 	keyboard := tgbotapi.NewInlineKeyboardMarkup(
	// 		tgbotapi.NewInlineKeyboardRow(
	// 			tgbotapi.NewInlineKeyboardButtonData("–ö–µ—Ä–∞–º–∏–∫–∞", "ceramic"),
	// 		),
	// 	)
	// 	return keyboard
	case "–ú–∞–≥–∞–∑–∏–Ω":
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–°–≤–µ—á–∏ üïØÔ∏è", "candles"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–ü–æ—Å—É–¥–∞ –¥–ª—è –ø–∏—Ç—å—è üç∑", "drinkware"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–ü–æ—Å—É–¥–∞ –¥–ª—è –µ–¥—ã üçΩÔ∏è", "dishware"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ üîç", "showAllItems"),
			),
		)
		return keyboard
	case "buttonForCart":
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É‚¨ÖÔ∏è", back.(string)),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ ‚¨ÖÔ∏è", back.(string)),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–í–µ—Ä–Ω—É—Ç—å—Å—è ‚¨ÖÔ∏è", back.(string)),
			),
		)
		return keyboard
	case "back":
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–í–µ—Ä–Ω—É—Ç—å—Å—è ‚¨ÖÔ∏è", back.(string)),
			),
		)
		return keyboard
	default:
		keyboard := tgbotapi.NewInlineKeyboardMarkup()
		log.Println("value is not found on func getKeyboard()")
		return keyboard
	}
}

func GetDynamicKeyboard(value string, session *sessions.Session) tgbotapi.InlineKeyboardMarkup {
	currentCard := session.CardManager.CurrentCard
	total := session.CartManager.Total(currentCard.ID)
	color.Redln("total in getDynamicKeyboard func:", total)
	var cartButtons []tgbotapi.InlineKeyboardButton

	if total != "0" {
		cartButtons = tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ûñ", "decrement"),
			tgbotapi.NewInlineKeyboardButtonData(total, "no_action"),
			tgbotapi.NewInlineKeyboardButtonData("‚ûï", "increment"),
		)

	} else {
		cartButtons = tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É  üõí", "addToCart"),
		)

	}

	switch value {
	case "addToCart":
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚è™", "prev"),
				tgbotapi.NewInlineKeyboardButtonData("‚è©", "next"),
			),
			cartButtons,
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–í–µ—Ä–Ω—É—Ç—å—Å—è ‚¨ÖÔ∏è", "–ú–∞–≥–∞–∑–∏–Ω"),
			),
		)
		return keyboard
	case "card":
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚è™", "prev"),
				tgbotapi.NewInlineKeyboardButtonData("‚è©", "next"),
			),
			cartButtons,
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–í–µ—Ä–Ω—É—Ç—å—Å—è ‚¨ÖÔ∏è", "–ú–∞–≥–∞–∑–∏–Ω"),
			),
		)
		return keyboard
	case "back":
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–í–µ—Ä–Ω—É—Ç—å—Å—è ‚¨ÖÔ∏è", "–ú–∞–≥–∞–∑–∏–Ω"),
			),
		)
		return keyboard
	default:
		keyboard := tgbotapi.NewInlineKeyboardMarkup()
		color.Redln("value is not found on func getKeyboard()")
		return keyboard
	}

}

func GetMessageText(step string) string {
	switch step {
	case "start":
		return "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –ú–∞–≥–∞–∑–∏–Ω –ö–µ—Ä–∞–º–∏–∫–∏! \n\nüé®–ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å—Ä–µ–¥–∏ –Ω–∞—à–∏—Ö —Ü–µ–Ω–∏—Ç–µ–ª–µ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∫–µ—Ä–∞–º–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏. –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –∏–∑—ã—Å–∫–∞–Ω–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —É—é—Ç–∞ –∏ –∫—Ä–∞—Å–æ—Ç—ã –≤–∞—à–µ–º—É –¥–æ–º—É."
	default:
		return "–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"
	}
}
