package messages

import (
	"fmt"
	"log"
	"os"

	"github.com/Resolution-hash/shop_bot/config"
	"github.com/Resolution-hash/shop_bot/internal/sessions"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"github.com/gookit/color"
)

func SendMessage(bot *tgbotapi.BotAPI, userID int, text string, keyboard interface{}) int {
	msg := tgbotapi.NewMessage(int64(userID), text)
	if keyboard != nil {
		switch k := keyboard.(type) {
		case tgbotapi.InlineKeyboardMarkup:
			msg.ReplyMarkup = k
		case tgbotapi.ReplyKeyboardMarkup:
			msg.ReplyMarkup = k
		}
	}
	msg.ParseMode = "HTML"
	sentMsg, err := bot.Send(msg)
	if err != nil {
		color.Redln("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %s\n", err)
		return 0
	}

	return sentMsg.MessageID
}

func SendReplyKeyboard(bot *tgbotapi.BotAPI, userID int, text string, keyboard tgbotapi.ReplyKeyboardMarkup) int {
	msg := tgbotapi.NewMessage(int64(userID), text)
	msg.ReplyMarkup = keyboard
	sentMsg, err := bot.Send(msg)
	if err != nil {
		color.Redln("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %s", err)
		return 0
	}
	color.Greenln("Keyboard is fetched")
	return sentMsg.MessageID
}

func EditMessage(bot *tgbotapi.BotAPI, userID int, messageID int, text string) int {
	msg := tgbotapi.NewEditMessageText(int64(userID), messageID, "–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç")
	sentMsg, err := bot.Send(msg)
	if err != nil {
		color.Redln("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %s\n", err)
		return 0
	}
	color.Greenln("Keyboard is fetched")
	return sentMsg.MessageID
}

func SendMessageWithPhoto(bot *tgbotapi.BotAPI, userID int, text string, keyboard interface{}, imageName string) int {
	cfg, err := config.LoadConfig()
	if err != nil {
		log.Fatal(err)
	}

	path := cfg.ImagesUrl + "\\" + imageName + ".jpg"
	color.Redln(path)

	file, err := os.Open(path)
	if err != nil {
		fmt.Println("Error to upload file")
	}
	defer file.Close()

	msg := tgbotapi.NewPhotoUpload(int64(userID), file.Name())
	msg.File = tgbotapi.FileReader{
		Name:   file.Name(),
		Reader: file,
		Size:   -1,
	}
	msg.Caption = text

	if keyboard != nil {
		switch k := keyboard.(type) {
		case tgbotapi.InlineKeyboardMarkup:
			msg.ReplyMarkup = k
		case tgbotapi.ReplyKeyboardMarkup:
			msg.ReplyMarkup = k
		}
	}
	sentMsg, err := bot.Send(msg)
	if err != nil {
		color.Redln("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
		return 0
	}
	return sentMsg.MessageID
}

// func SendMessageWithPhotos(bot *tgbotapi.BotAPI, userID int, text string, keyboard interface{}, imageNames []string) int {
// 	cfg, err := config.LoadConfig()
// 	if err != nil {
// 		log.Fatal(err)
// 	}
// 	color.Redln("imageNames LEN", len(imageNames))
// 	files := make(map[string]tgbotapi.RequestFileData)
// 	mediaGroup := make([]interface{}, len(imageNames))
// 	for i, imageName := range imageNames {
// 		color.Redln("imageName", imageName)
// 		path := cfg.ImagesUrl + "\\" + imageName + ".jpg"
// 		color.Redln(path)

// 		file, err := os.Open(path)
// 		if err != nil {
// 			fmt.Println("Error to upload file")
// 		}
// 		defer file.Close()

// 		photo := tgbotapi.NewInputMediaPhoto(path)

// 		if i == 0 {
// 			photo.Caption = text
// 		}

// 		mediaGroup[i] = photo
// 	}
// 	mediaGroupConfig := tgbotapi.NewMediaGroup(int64(userID), mediaGroup)

// 	if keyboard != nil {
// 		switch k := keyboard.(type) {
// 		case tgbotapi.InlineKeyboardMarkup:
// 			mediaGroupConfig.ReplyMarkup = k
// 		case tgbotapi.ReplyKeyboardMarkup:
// 			mediaGroupConfig.ReplyMarkup = k
// 		}
// 	}
// 	sentMsg, err := bot.Send(mediaGroupConfig)
// 	if err != nil {
// 		color.Redln("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
// 		return 0
// 	}
// 	return sentMsg.MessageID
// }

func DeleteMessage(bot *tgbotapi.BotAPI, messageID int, userID int) {
	deleteConfig := tgbotapi.NewDeleteMessage(int64(userID), messageID)
	if _, err := bot.Send(deleteConfig); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %s\n", err)
	}
}

func GetReplyKeyboard() tgbotapi.ReplyKeyboardMarkup {
	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–ú–∞–≥–∞–∑–∏–Ω"),
			tgbotapi.NewKeyboardButton("–ö–æ—Ä–∑–∏–Ω–∞"),
		),
	)
	return keyboard
}

func GetKeyboard(value string, session *sessions.Session, back interface{}) tgbotapi.InlineKeyboardMarkup {
	switch value {
	case "–ú–∞–≥–∞–∑–∏–Ω":
		isAdmin := session.User.IsAdmin
		rows := [][]tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üïØÔ∏è –°–≤–µ—á–∏", "candles"),
				tgbotapi.NewInlineKeyboardButtonData("üç∑ –ü–æ—Å—É–¥–∞ –¥–ª—è –ø–∏—Ç—å—è", "drinkware"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üçΩÔ∏è –ü–æ—Å—É–¥–∞ –¥–ª—è –µ–¥—ã", "dishware"),
				tgbotapi.NewInlineKeyboardButtonData("üîç –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ", "showAllItems"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", "–ö–æ—Ä–∑–∏–Ω–∞"),
			),
		}

		if isAdmin == 1 {
			adminButton := tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üõ†Ô∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", "adminPanel"),
			)
			rows = append(rows, adminButton)
		}

		return tgbotapi.NewInlineKeyboardMarkup(rows...)
	case "–ö–æ—Ä–∑–∏–Ω–∞":
		if session.CartManager.CartIsEmpty {
			return tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("üõçÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω ", "–ú–∞–≥–∞–∑–∏–Ω"),
				),
			)
		}
		return tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É ", "changeCart"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üì¶ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ ", "Checkout"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üõçÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω", "–ú–∞–≥–∞–∑–∏–Ω"),
			),
		)
	case "changeCart":
		itemID := int(session.CardManager.CurrentCard.ID)
		userID := session.User.UserID

		quantity, err := session.CartManager.GetQuantity(itemID, userID)
		if err != nil {
			color.Redln(err)
		}
		color.Redln("quantity", quantity, " itemID", itemID)

		if quantity != "0" {
			return tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("‚è™", "prev"),
					tgbotapi.NewInlineKeyboardButtonData("‚è©", "next"),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("–£–¥–∞–ª–∏—Ç—å", "delete"),
					tgbotapi.NewInlineKeyboardButtonData("‚ûñ", "decrement"),
					tgbotapi.NewInlineKeyboardButtonData(quantity, "no_action"),
					tgbotapi.NewInlineKeyboardButtonData("‚ûï", "increment"),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("üõçÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω", "–ú–∞–≥–∞–∑–∏–Ω"),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("üìù –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é", "–ö–æ—Ä–∑–∏–Ω–∞"),
				),
			)

		} else {
			return tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("‚è™", "prev"),
					tgbotapi.NewInlineKeyboardButtonData("‚è©", "next"),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", "addToCart"),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("üõçÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω", "–ú–∞–≥–∞–∑–∏–Ω"),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("üìù –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é", "–ö–æ—Ä–∑–∏–Ω–∞"),
				),
			)
		}
	case "start":
		return tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üõçÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω", "–ú–∞–≥–∞–∑–∏–Ω"),
			),
		)

	case "back":
		return tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", back.(string)),
			),
		)
	default:
		color.Redln("Value is not found in GetKeyboard()")
		return tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", "–ú–∞–≥–∞–∑–∏–Ω"),
			),
		)
	}
}

func GetCardKeyboard(session *sessions.Session) tgbotapi.InlineKeyboardMarkup {
	itemID := int(session.CardManager.CurrentCard.ID)
	userID := session.User.UserID

	quantity, err := session.CartManager.GetQuantity(itemID, userID)
	if err != nil {
		color.Redln(err)
	}
	color.Redln("quantity", quantity, " itemID", itemID)

	if quantity != "0" {
		return tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚è™", "prev"),
				tgbotapi.NewInlineKeyboardButtonData("‚è©", "next"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–£–¥–∞–ª–∏—Ç—å", "delete"),
				tgbotapi.NewInlineKeyboardButtonData("‚ûñ", "decrement"),
				tgbotapi.NewInlineKeyboardButtonData(quantity, "no_action"),
				tgbotapi.NewInlineKeyboardButtonData("‚ûï", "increment"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", "–ö–æ—Ä–∑–∏–Ω–∞"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", "–ú–∞–≥–∞–∑–∏–Ω"),
			),
		)

	} else {
		return tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚è™", "prev"),
				tgbotapi.NewInlineKeyboardButtonData("‚è©", "next"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É ", "addToCart"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", "–ú–∞–≥–∞–∑–∏–Ω"),
			),
		)
	}
}

func GetMessageText(step string) string {
	switch step {
	case "start":
		return "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –ú–∞–≥–∞–∑–∏–Ω –ö–µ—Ä–∞–º–∏–∫–∏! \n\nüé®–ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å—Ä–µ–¥–∏ –Ω–∞—à–∏—Ö —Ü–µ–Ω–∏—Ç–µ–ª–µ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∫–µ—Ä–∞–º–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏. –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –∏–∑—ã—Å–∫–∞–Ω–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —É—é—Ç–∞ –∏ –∫—Ä–∞—Å–æ—Ç—ã –≤–∞—à–µ–º—É –¥–æ–º—É."
	default:
		return "–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"
	}
}
